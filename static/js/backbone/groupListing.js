// ensure we can listen to backbone events generated by Group objects
_.extend(window, Backbone.Events);

// =======================
// =                     =
// =        MODEL        =
// =                     =
// =======================


/**
 * Individual group model
 */
GroupListingModel = Backbone.Model.extend({
  urlRoot: '/groups',
  defaults: {
    groups: []
  },
  /**
   * add a group to this listing model
   */
  addGroup: function(group) {
    this.get("groups").push(group);
  },
  /**
   * remove a group from this listing model
   */
  removeGroup: function(group) {
    var groups = this.get("groups");
    var pos = groups.indexOf(group);
    if(pos!==-1) {
      groups.splice(pos, 1);
    }
  }
});


// =======================
// =                     =
// =        VIEWS        =
// =                     =
// =======================


/**
 * View for groups as list items
 */
GroupListingView = Backbone.View.extend({
  parent: $('.groups'),
  /**
   * Render this view to the page
   */
  render: function() {
    var values = this.model.toJSON(),
        html = env.render('GroupListingView.html', values);
    this.setElement($(html));
    this.setupUX();
    return this;
  },
  /**
   * Set up the UX for this view's element(s),
   * tied to a specific controller for the logic.
   */
  setupUX: function() {
    var $el = this.$el,
        controller = this.controller;
    var createButton = $el.find("button.create"),
        creating = false,
        enableButton = function() { creating = false; createButton.fadeIn(); },
        nogroup = $el.find(".noGroups"),
        editViews = 0;

    /**
     * When the create button is clicked, load a
     * "new group" template, and bind save/cancel
     * behaviour to the button/link span.
     */
    createButton.click(function(btn) {
      if(creating) return;
      createButton.hide();
      nogroup.hide();

      var newGroup = controller.createGroup();
      newGroup.asEditableEntry();
      var $el = newGroup.currentView.$el;
      $(".groups .listing").append($el);
    });

    // Track group actions that warrant UI changes:
    window.on("group-saved",      function() { nogroup.remove();    });
    window.on("group-cancelled",  function() { nogroup.show();      });

    // Track open "edit" views:
    window.on("group-edit-start", function() { editViews++; createButton.hide(); });
    window.on("group-edit-end",   function() { if (--editViews==0) { enableButton(); }});
  },
  
  /**
   * If loaded with groups, remove the "you have no groups" notice.
   */
  removeNoGroupNotice: function() {
    this.$el.find(".noGroups").remove();
  }
});

// ===============================
// =                             =
// = CONTROLLERS: Group Listing  =
// =                             =
// ===============================


var GroupListing = function() {
  this.setModel(new GroupListingModel());
};


/**
 * Group listing object representation - 'copy' constructor
 *
 * @param {HTMLElement} element that acts as construction template
 */
GroupListing.fromElement = function (element) {
  var $el = $(element),
      section = $el.find("section");
  
  // set up a new listing
  var listing = new GroupListing();
  // find all groups we need to boostrap, too
  var groups = section.find(".listing .group");
  var newSection = listing.render().$el;
  section.replaceWith(newSection);  

  // if more than 0 groups, remove notice and
  // bootstrap group objects.
  if(groups.length>0) {
    listing.removeNoGroupNotice();
    groups.each(function(){
      var group = listing.createGroupFromElement(this);
      group.owner = this;
      newSection.find("ul").append(group.currentView.$el);
    });
  }

  // done
  return listing;
};

/**
 * Group listing object representation - prototype
 */
GroupListing.prototype = {
  model: null,
  views: null,
  currentView: null,

  /**
   * Set the model for this group
   */
  setModel: function(GroupListingModel) {
    this.model = GroupListingModel;
    GroupListingModel.controller = this;
    this.views =  {
      listing: new GroupListingView({model: GroupListingModel})
    };
    this.views.listing.controller = this;
    this.currentView = this.views.listing;
    this.render();
  },


  /**
   * Render this listing (delegated to current view)
   */
  render: function() {
    return this.currentView.render(this.model);
  },

  /**
   * Create a group and add it to the list of known groups.
   */
  createGroup: function(name, id, url, badges) {
    var group;
    if(name && id && url && badges) { group = new Group(name, id, url, badges); }
    else { group = new Group(); }
    this.model.addGroup(group);
    return group;
  },

  /**
   * Bootstrap a group and add it to the list of known groups.
   */
  createGroupFromElement: function(element) {
    var group = Group.fromElement(element);
    this.model.addGroup(group);    
    return group;
  },
  
  /**
   * If loaded with groups, remove the "you have no groups" notice.
   */
  removeNoGroupNotice: function() {
    this.currentView.removeNoGroupNotice();
  }
};

// ensure correct constructor identifier
GroupListing.prototype.constructor = GroupListing;

