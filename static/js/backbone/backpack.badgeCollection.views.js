// ensure we can listen to backbone events generated by Group objects
_.extend(window, Backbone.Events);

/**
 * View for groups as list items
 */
BadgeCollectionView = Backbone.View.extend({
  parent: $('.collection'),
  currentSet: null,
  currentSetId: -1,
  setSize: 9999,

  /**
   * Render this view to the page
   */
  render: function() {
    var values = this.model.toJSON(),
        html = env.render('Backpack.Badge.CollectionView.html', values);
    this.setElement($(html));
    this.setupUX();
    return this;
  },

  /**
   * Set up the UX for this view's element(s),
   * tied to a specific controller for the logic.
   */
  setupUX: function() {
    window.on("group-edit-start", (function(controller) {
      return function(evt) {
        controller.addBadgePickers(evt.group);
      };
    }(this.controller)));

    window.on("group-edit-end", (function(controller) {
      return function(evt) {
        controller.removeBadgePickers();
      };
    }(this.controller)));
    
    this.setSize = parseInt(this.$el.find(".pages").data("set-size"));
    this.currentSet = this.$el.find(".set").last();
    this.currentSetId = parseInt(this.currentSet.data("id"));
    
    var view = this;
    this.$el.find(".next").click(function() { view.nextSet();     });
    this.$el.find(".previous").click(function() { view.previousSet(); });
    this.$el.find(".boxed[data-page=1]").click(function() { view.selectSet(1); });
  },
  
  /**
   * Add a badge to this view
   */
  addBadgeElement: function(element) {
    var set = this.currentSet;
    if(set.find(".badge").length >= this.setSize) {
      set.hide();
      this.newSet(set);
    }
    this.currentSet.append(element);
  },
  
  /**
   * Set up a new set
   */
  newSet: function(oldSet) {
    var pages = this.$el.find(".pages");
    pages.show();

    var newId = this.currentSetId + 1;
    var newSet = $('<div class="set" data-id="'+newId+'"></div>');
    this.currentSetId = newId;
    this.currentSet = newSet;
    this.el.insertBefore(this.currentSet[0], pages[0]);
    
    var view = this;
    var pagebutton = $('<button class="boxed page highlight" data-page="'+newId+'">'+newId+'</button>');
    pagebutton.click(function() { view.selectSet(newId); });
    var next = pages.find(".next");
    pages[0].insertBefore(pagebutton[0], next[0]);
  },
  
  /**
   * Show set no. ...
   */
  selectSet: function(id) {
    var button = this.$el.find(".pages .boxed[data-page="+this.currentSetId+"]");
    button.removeClass("highlight");
    this.currentSet.hide();

    this.currentSet = this.$el.find(".set[data-id="+id+"]");
    this.currentSet.show();
    this.currentSetId = id;
    button = this.$el.find(".pages .boxed[data-page="+this.currentSetId+"]");
    button.addClass("highlight");
  },
  
  nextSet: function() {
    var sets = this.$el.find(".set");
    if(this.currentSetId >= sets.length) return;
    this.selectSet(this.currentSetId + 1);
  },

  previousSet: function() {
    if(this.currentSetId === 1) return;
    this.selectSet(this.currentSetId - 1);
  },

  // ------

  badgePickersPresent: false,

  /**
   * Add buttons to each badge, for adding badges
   * to specific group badge areas. 
   */
  addBadgePickers: function(group) {
    if (this.badgePickersPresent) {
      return;
    }
    
    var $el = this.$el;

    this.badgePickersPresent = true;
    $el.find(".badge").each(function(){

      var addToGroup = $("<div class='actions'>"
                   + "  <button class='btn addToGroup' data-id='"+$(this).attr("data-id")+"'>Add to Group</button>"
                   + "</div>");

      $("button",addToGroup).click(function(){
        var view = group.currentView,
        badgeArea = view.$el.find(".badgeArea");

        // add to the new group
        var dataId = $(this).attr("data-id");
        // check whether we already have this badge
        if(group.hasBadge(dataId)) {
          return;
        }
        var badgeSelector = ".badges .badge[data-id="+dataId+"]",
            badge = $($(badgeSelector)[0]); // force single (prevents browser-widening of the nodelist)
        badge.popover('hide');
        badge = badge.clone();
        $(".actions",badge).remove();

        view.addToBadgeArea(badge);
        group.addBadge(dataId);
      });

      $(this).append(addToGroup);
    });
  },

  /**
   * Remove the badge 'add to group' buttons
   */
  removeBadgePickers: function() {
    var $el = this.$el;
    $el.find(".badge").each(function(){
      $(".actions",this).remove();
    });
    this.badgePickersPresent = false;
  }

});