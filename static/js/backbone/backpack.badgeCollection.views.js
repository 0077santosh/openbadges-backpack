// ensure we can listen to backbone events generated by Group objects
_.extend(window, Backbone.Events);

/**
 * View for groups as list items
 */
BadgeCollectionView = Backbone.View.extend({
  parent: $('.collection'),

  /**
   * Render this view to the page
   */
  render: function() {
    var values = this.model.toJSON(),
        html = env.render('Backpack.Badge.CollectionView.html', values);
    this.setElement($(html));
    this.setupUX();
    return this;
  },

  /**
   * Set up the UX for this view's element(s),
   * tied to a specific controller for the logic.
   */
  setupUX: function() {
    /** there is no special UX for this view **/
  },
  
  /**
   * Add a badge to this view
   */
  addBadgeElement: function(element) {
    this.$el.append(element);
  },

  badgePickersPresent: false,

  /**
   * Add buttons to each badge, for adding badges
   * to specific group badge areas. 
   */
  addBadgePickers: function(group) {
    if (this.badgePickersPresent) {
      return;
    }
    
    var $el = this.$el;

    this.badgePickersPresent = true;
    $el.find(".badge").each(function(){

      var addToGroup = $("<div class='actions'>"
                   + "  <button class='btn addToGroup' data-id='"+$(this).attr("data-id")+"'>Add to Group</button>"
                   + "</div>");

      $("button",addToGroup).click(function(){
        var view = group.currentView,
        badgeArea = view.$el.find(".badgeArea");

        // add to the new group
        var dataId = $(this).attr("data-id");
        // check whether we already have this badge
        if(group.hasBadge(dataId)) {
          return;
        }
        var badgeSelector = ".badges .badge[data-id="+dataId+"]",
            badge = $($(badgeSelector)[0]); // force single (prevents browser-widening of the nodelist)
        badge.popover('hide');
        badge = badge.clone();
        $(".actions",badge).remove();

        view.addToBadgeArea(badge);
        group.addBadge(dataId);
      });

      $(this).append(addToGroup);
    });
  },

  /**
   * Remove the badge 'add to group' buttons
   */
  removeBadgePickers: function() {
    var $el = this.$el;
    $el.find(".badge").each(function(){
      $(".actions",this).remove();
    });
    this.badgePickersPresent = false;
  }

});