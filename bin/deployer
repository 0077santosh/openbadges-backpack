#! /usr/bin/env node

var util = require('util');
var http = require('http');
var program = require('commander');
var colors = require('colors');
var path = require('path');
var spawn = require('child_process').spawn;

function inspect (thing) {
  return util.inspect(thing, undefined, undefined, true);
}
function debug() {
  var args = [].slice.call(arguments);
  args.unshift('debug'.grey);
  console.log.apply(console, args);
}
function error() {
  var args = [].slice.call(arguments);
  args.unshift('  error'.red);
  console.log();
  console.log.apply(console, args);
  console.log();
}
function accept() {
  var args = [].slice.call(arguments);
  args.unshift('accept'.green);
  console.log.apply(console, args);
}
var log = console.log;

program
  .version('0.0.1')
  .option('-p, --port <n>', 'port the webhook endpoint should listen on')
  .option('-a, --auth <value>', 'authorization key to expect in the header')
  .option('-b, --branch <name>', 'branch to watch')
  .option('-e, --script <file>', 'file to execute on a successful test run')
  .parse(process.argv);

if (program.port === undefined) {
  program.missingArgument('--port');
}
if (!program.auth) {
  program.missingArgument('--auth');
}
if (!program.script) {
  program.missingArgument('--script');
}
if (!program.branch) {
  program.missingArgument('--branch');
}
if (!path.existsSync(program.script)) {
  error('could not find file', program.script.bold);
  process.exit(1);
}

debug('listening on port', program.port.toString().blue);
debug('authorization code', program.auth.toString().blue);

var lastRunData;
function requestHandler(request, response) {
  var auth;
  var length;
  var headers = request.headers;

  function reject() {
    var args = [].slice.call(arguments);
    // immediately end the response
    response.end('rejected: ' + args.join(' '));
    args.unshift('reject'.red);
    console.log.apply(console, args);
 }

  if (request.method.match(/get/i)) {
    response.setHeader('content-type', 'text/plain; charset=utf-8');
    if (!lastRunData)
      return response.end('nothing has been run yet');
    return response.end(lastRunData);
  }

  if (!request.method.match(/post/i))
    return reject('got request, but not a POST');

  if (!(auth = headers['authorization']))
    return reject('missing authorization code');

  if (auth !== program.auth)
    return reject('invalid authorization code, got', auth.bold);

  if (!(length = headers['content-length']))
    return reject('expects a `content-length` header');

  function parseIncoming(data) {
    try {
      // data comes in as `payload=...`, so we want to slice that first part off and decode it.
      var payload = decodeURIComponent(data.slice(8));
      var hookData = JSON.parse(payload);
      return hookData;
    } catch (e) {
      // well, just don't do anything I guess
      return;
    }
  }

  function executeScript(payload) {
    var message = payload.status_message;
    var status = payload.status;
    var branch = payload.branch;
    var lastChar = '\n';

    if (!message || status === undefined || !branch) {
      reject('the payload didn\'t have the expected fields');
      return debug(inspect(payload))
    }

    if (branch !== program.branch)
      return reject('ignoring, branch doesn\'t match');

    if (!message.match(/passed/i) || status !== 0)
      return reject('the tests failed, not deploying.');

    lastRunData = '';
    function echoScript(data) {
      var dataString = data.toString();
      if (lastChar === '\n') process.stdin.write(program.script.magenta + ' ');
      process.stdin.write(data);
      lastRunData += dataString;
      lastChar = dataString[dataString.length - 1];
    }

    var script = spawn('./' + program.script);
    script.stdout.on('data', echoScript);
    script.stderr.on('data', echoScript);
    script.on('exit', function (code) {
      if (code === 0) return accept('script successfully completed');
      reject('something went wrong the the deploy script');
    });
    return true;
  }

  var incoming = '';
  // buffer incoming data;
  // TODO: might be more memory friendly to use a real buffer instead?
  request.on('data', function (data) { incoming += data });
  request.on('end', function () {
    var payload;
    if (!(payload = parseIncoming(incoming))) {
      reject('the payload was malformed');
      return debug(inspect(incoming));
    }
    debug('successful payload recieved, executing script');
    if (executeScript(payload))
      response.end('ok');
  });
};

var server = http.createServer();
server.on('request', requestHandler);
server.listen(program.port);
